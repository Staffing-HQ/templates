apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: spring-boot-app
  title: Create a Spring Boot app
  description: A template for creating a Spring Boot app
  tags:
    - spring-boot
    - java
    - maven
spec:
  owner: group:developers
  type: service

  parameters:
    - title: Provide information about Spring Boot app
      required:
        - component_id
        - orgName
        - appName
        - domainName
        - domainNameLc
        - groupId
        - javaPackage
        - description
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          default: my-spring-boot-app
          ui:field: EntityNamePicker
        orgName:
          title: Organization name
          type: string
          default: staffinghq
        appName:
          title: App name
          type: string
          default: My Spring Boot App
        domainName:
          title: Name of the domain object
          type: string
          default: Person
        domainNameLc:
          title: Lowercase name of the domain object
          type: string
          default: person
        groupId:
          title: Maven Group ID
          type: string
          default: com.staffinghq
        javaPackage:
          title: Java package directory
          type: string
          default: com/staffinghq
        description:
          title: Description
          type: string
          default: Sample Spring Boot App
    - title: Configure component relationships
      required:
        - owner
      properties:
        owner:
          title: Owner
          type: string
          description: The owner of the component
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - Group
              - User
        dependsOn:
          title: Depends on
          type: array
          description: The component that this component depends on
          ui:field: MultiEntityPicker
          ui:options:
            catalogFilter:
              - kind: [Component, API, Resource]
        system:
          title: System
          type: string
          description: The system that the component belongs to
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - System
    - title: Configure plugins
      properties:
        enableSonarQube:
          title: SonarQube
          type: boolean
          default: false
        enableGrafana:
          title: Grafana
          type: boolean
          default: false
        enableCICD:
          title: CI/CD
          type: boolean
          default: false
        enableKubernetes:
          title: Kubernetes
          type: boolean
          default: false
        enableSnow:
          title: Service Now
          type: boolean
          default: false
      dependencies:
        enableSonarQube:
          allOf:
            - if:
                properties:
                  enableSonarQube:
                    const: true
              then:
                required:
                  - sonarqubeProjectKey
                properties:
                  sonarqubeProjectKey:
                    title: Project key
                    description: SonarQube project key
                    type: string
        enableGrafana:
          allOf:
            - if:
                properties:
                  enableGrafana:
                    const: true
              then:
                required:
                  - grafanaDashboardUrl
                  - grafanaDashboardSelector
                properties:
                  grafanaDashboardUrl:
                    title: Grafana dashboard URL
                    type: string
                    format: uri
                  grafanaDashboardSelector:
                    title: Grafana dashboard selector
                    type: string
        enableKubernetes:
          allOf:
            - if:
                properties:
                  enableKubernetes:
                    const: true
              then:
                required:
                  - k8sId
                  - podLabel
                  - k8sNamespace
                properties:
                  k8sId:
                    title: Kubernetes identifier
                    type: string
                  podLabel:
                    title: Kubernetes Pod label
                    type: string
                  k8sNamespace:
                    title: Kubernetes namespace
                    type: string
                    default: default
        enableSnow:
          allOf:
            - if:
                properties:
                  enableSnow:
                    const: true
              then:
                required:
                  - snowProjectId
                properties:
                  snowProjectId:
                    title: SNOW Project ID
                    type: string
                    description: Service Now Project ID
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - Staffing-HQ

  steps:
    - id: fetch-base
      name: Generating the base component
      action: fetch:template
      input:
        url: ./content
        copyWithoutTemplating:
          - .github/workflows/*.yml
          - .github/workflows/*.yaml
        values:
          component_id: ${{ parameters.component_id }}
          orgName: ${{ parameters.orgName }}
          appName: ${{ parameters.appName }}
          domainName: ${{ parameters.domainName }}
          domainNameLc: ${{ parameters.domainNameLc }}
          description: ${{ parameters.description }}
          groupId: ${{ parameters.groupId }}
          javaPackage: ${{ parameters.javaPackage }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          dependsOn: ${{ parameters.dependsOn }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          sonarqube: ${{ parameters.enableSonarQube }}
          sonarqubeProjectKey: ${{ parameters.sonarqubeProjectKey }}
          grafana: ${{ parameters.enableGrafana }}
          grafanaDashboardUrl: ${{ parameters.grafanaDashboardUrl }}
          grafanaDashboardSelector: ${{ parameters.grafanaDashboardSelector }}
          cicd: ${{ parameters.enableCICD }}
          kubernetes: ${{ parameters.enableKubernetes }}
          k8sId: ${{ parameters.k8sId }}
          podLabel: ${{ parameters.podLabel }}
          k8sNamespace: ${{ parameters.k8sNamespace }}
          snow: ${{ parameters.enableSnow }}
          snowProjectId: ${{ parameters.snowProjectId }}

    - id: publish
      name: Publishing to the Git repository
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}
        repoVisibility: public

    - id: register
      name: Registering the component in the catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
